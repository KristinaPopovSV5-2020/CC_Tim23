service: PhotoAlbumProject

frameworkVersion: '3'

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: python3.10
  stage: prod
  region: eu-north-1
  memorySize: 128
  timeout: 10
  environment:
    CONTENT_TABLE_NAME:
      Ref: ContentTable
    SHARE_TABLE_NAME:
      Ref: ShareTable
    MEMBER_TABLE_NAME:
      Ref: MemberTable
    RESOURCES_BUCKET_NAME:
      Ref: S3Bucket
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ ContentTable, Arn ]
        - "Fn::GetAtt": [ ShareTable, Arn ]
        - "Fn::GetAtt": [ MemberTable, Arn ]
        - "Fn::GetAtt": [ S3Bucket, Arn ]
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"
    - Effect: Allow
      Action:
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminInitiateAuth
      Resource: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [ ContentTable, Arn ]
              - '/index/username-index'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [ ShareTable, Arn ]
              - '/index/username-index'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [ MemberTable, Arn ]
              - '/index/username-index'
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:ListBucket
        - s3:DeleteObject
      Resource:
        - "arn:aws:s3:::user-photo-albums3"
        - "arn:aws:s3:::user-photo-albums3/*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource: arn:aws:sqs:eu-north-1:815307418428:NotificationQueue

package:
  individually: true
  patterns:
    - '!**/**'



functions:
  createAlbum:
    handler: createAlbum/create_album.create
    package:
      patterns:
        - 'createAlbum/**'
    events:
      - http:
          path: create-album
          method: post
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS
  deleteAlbum:
    handler: deleteAlbum/delete_album.delete
    package:
      patterns:
        - 'deleteAlbum/**'
    events:
      - http:
          path: gallery/{album}
          method: delete
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

  deleteFile:
    handler: deleteFile/delete_file.handler
    runtime: nodejs14.x
    package:
      patterns:
        - 'deleteFile/**'
    events:
      - http:
          path: delete/{id}
          method: delete
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS
            

  deleteSharedContent:
    handler: deleteSharedContent/delete_shared_content.delete
    package:
      patterns:
        - 'deleteSharedContent/**'
    events:
      - http:
          path: share_content/{id}
          method: delete
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

  getSharedContent:
    handler: getSharedContent/get_shared_content.get
    package:
      patterns:
        - 'getSharedContent/**'
    events:
      - http:
          path: shared/{folder}
          method: get
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

  getSharedGallery:
    handler: getSharedGallery/get_shared_gallery.get
    package:
      patterns:
        - 'getSharedGallery/**'
    events:
      - http:
          path: shared_content
          method: get
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

  getAlbumContent:
    handler: getAlbumContent/get_album_content.get
    package:
      patterns:
        - 'getAlbumContent/**'
    events:
      - http:
          path: gallery/{album}
          method: get
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

  getSubfolders:
    handler: getSubfolders/get_subfolders.handler
    runtime: nodejs14.x
    package:
      patterns:
        - 'getSubfolders/**'
    events:
      - http:
          path: subfolders/{folder}
          method: get
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS
  inviteMemebr:
    handler: inviteMember/invite_member.invite
    package:
      patterns:
        - 'inviteMember/**'
    events:
      - http:
          path: invite/{email}
          method: get
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS


  loginUser:
    handler: loginUser/login_users.handler
    runtime: nodejs14.x
    package:
      patterns:
        - 'loginUser/**'
    events:
      - http:
          path: login_user
          method: post
          cors: true

  moveFile:
    handler: moveFile/move_file.handler
    runtime: nodejs14.x
    package:
      patterns:
        - 'moveFile/**'
    events:
      - http:
          path: move
          method: put
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

  s3Copy:
      handler: moveFile/move_file.handlerCopy
      runtime: nodejs14.x
      package:
        patterns:
          - 'moveFile/**'
  s3Delete:
    handler: moveFile/move_file.handlerDelete
    runtime: nodejs14.x
    package:
      patterns:
        - 'moveFile/**'
  moveDynamoDB:
    handler: moveFile/move_file.handlerDynamoDB
    runtime: nodejs14.x
    package:
      patterns:
        - 'moveFile/**'
  registerUser:
    handler: registerUser/register_user.handler
    runtime: nodejs14.x
    package:
      patterns:
        - 'registerUser/**'
    events:
      - http:
          path: register_user
          method: post
          integration: lambda-proxy
          cors: true

  shareContent:
    handler: shareContent/share_content.share
    package:
      patterns:
        - 'shareContent/**'
    events:
      - http:
          path: share_content
          method: post
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

  updateFile:
    handler: updateFile/update_file.handler
    runtime: nodejs14.x
    package:
      patterns:
        - 'updateFile/**'
    events:
      - http:
          path: update/{id}
          method: put
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

  updateFileDynamoDB:
    handler: updateFile/update_file.handlerDynamoDB
    runtime: nodejs14.x
    package:
      patterns:
        - 'updateFile/**'
    events:
      - http:
          path: updateDynamoDB/{id}
          method: put
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

  uploadFiles:
    handler: uploadFiles/upload_files.upload
    package:
      patterns:
        - 'uploadFiles/**'
    events:
      - http:
          path: upload
          method: post
          integration: lambda-proxy
          cors: true
          authorizer:
            name: UserPoolAuth
            arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
            identitySource: method.request.header.Authorization
            type: COGNITO_USER_POOLS

stepFunctions:
  stateMachines:
    firstStepFunction:
      events:
        - http:
            path: updateFile/{id}
            method: put
            authorizer:
              name: UserPoolAuth
              arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
              identitySource: method.request.header.Authorization
              type: COGNITO_USER_POOLS
      definition:
        StartAt: updateFile
        States:
          updateFile:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:815307418428:function:${self:service}-${self:provider.stage}-updateFile"
            Next: updateFileDynamoDB
          updateFileDynamoDB:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:815307418428:function:${self:service}-${self:provider.stage}-updateFileDynamoDB"
            End: true
    moveStepFunction:
      events:
        - http:
            path: moveFile/{id}
            method: put
            authorizer:
              name: UserPoolAuth
              arn: arn:aws:cognito-idp:eu-north-1:815307418428:userpool/eu-north-1_eXQUKF6d5
              identitySource: method.request.header.Authorization
              type: COGNITO_USER_POOLS
      definition:
        StartAt: moveDynamoDB
        States:
          moveDynamoDB:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:815307418428:function:${self:service}-${self:provider.stage}-moveDynamoDB"
            Next: s3Copy
          s3Copy:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:815307418428:function:${self:service}-${self:provider.stage}-s3Copy"
            Next: s3Delete
          s3Delete:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:815307418428:function:${self:service}-${self:provider.stage}-s3Delete"
            End: true


resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: user-photo-albums3

    ContentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: content_table2
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: filename
            AttributeType: S
          - AttributeName: album
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: username-index
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: filename-index
            KeySchema:
                - AttributeName: filename
                  KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: album-index
            KeySchema:
                - AttributeName: album
                  KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ShareTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: share_table2
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: sharedWith
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: username-index
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: sharedWith-index
            KeySchema:
              - AttributeName: sharedWith
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


    MemberTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: member_table2
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S

        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: username-index
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    
    NotificationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: NotificationsQueue
        VisibilityTimeout: 300
        MaximumMessageSize: 262144

